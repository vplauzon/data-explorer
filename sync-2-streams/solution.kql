//  Let's create some sensor data
//  First we measure the "colour" of an asset every even seconds
.set-or-replace colours <| datatable(assetId:int, timeStamp:datetime, colour:string)
    [
    12, datetime(2020-1-1 20:00:04), "blue",
    12, datetime(2020-1-1 20:00:06), "blue",
    12, datetime(2020-1-1 20:00:08), "red",
    13, datetime(2020-1-1 20:00:04), "yellow",
    13, datetime(2020-1-1 20:00:06), "yellow",
    13, datetime(2020-1-1 20:00:08), "green",
    ];

//  Then we measure the temperature of an asset every odd seconds
.set-or-replace temperatures <| datatable(assetId:int, timeStamp:datetime, temperature:int)
    [
    12, datetime(2020-1-1 20:00:05), 20,
    12, datetime(2020-1-1 20:00:07), 22,
    12, datetime(2020-1-1 20:00:09), 25,
    13, datetime(2020-1-1 20:00:05), 15,
    13, datetime(2020-1-1 20:00:07), 13,
    13, datetime(2020-1-1 20:00:09), 10,
    ];

//  If we join the two measures by asset-id, we get the usual cross-product
colours
| join kind=inner temperatures on assetId

//  We want to find the timestamp in temperatures that is the closest to the one in
//  colours ; we want one early or at the same time.
//  This is how we're going to eliminate the cross-product rows
//  Let's start by having the colour timestamp be greater or equal to temperature's
//  timestamp.
//  Instead of 18 records, that returns 12
//  Notice we lost the colour measure at 20:00:04 since there is no
//  earlier measure in temperature
colours
| join kind=inner temperatures on assetId
| where timeStamp >= timeStamp1

//  Now, let's take the largest temperature's timestamp
//  This gives us a mapping, by asset, of the 2 sensors timestamp
colours
| join kind=inner temperatures on assetId
| where timeStamp >= timeStamp1
| summarize temperatureTimeStamp=max(timeStamp1) by assetId, colourTimeStamp=timeStamp

//  Now, let's use that mapping to match the sensor values
//  Again we lost the two colour readings at 20:00:04 since
//  there was no temperature reading earlier or at the same time
let mapping=colours
| join kind=inner temperatures on assetId
| where timeStamp >= timeStamp1
| summarize temperatureTimeStamp=max(timeStamp1) by assetId, colourTimeStamp=timeStamp;
colours
| join kind=inner mapping on assetId
| where timeStamp == colourTimeStamp
| join kind=inner temperatures on assetId
| where timeStamp1 == temperatureTimeStamp
| project assetId, colourTimeStamp, temperatureTimeStamp, colour, temperature

//  Let's try this solution with volume
//  Let's create 10 millions records colour table (with 5000 assets)
.set-or-replace fullColours <|
(
    range i from 0 to 10000000 step 1
    | extend assetId = 1 + i % 5000
    | extend timeStep = i / 5000
    | extend timeStamp = datetime(2010-1-1 0:00:00) + timeStep * 2s
    | extend r = rand(3)
    | extend colour = case(r==0, "green", r==1, "yellow", "red")
    | project assetId, timeStamp, colour
)

//  Let's create 20 millions records (5000 assets) temperature table
//  It covers the same time range but with twice the measurement frequency
.set-or-replace fullTemperatures <|
(
    range i from 0 to 20000000 step 1
    | extend assetId = 1 + i % 5000
    | extend timeStep = i / 5000
    | extend timeStamp = datetime(2010-1-1 0:00:00) + timeStep * 1s
    | extend temperature = 10 + rand(25)
    | project assetId, timeStamp, temperature
)

//  Now, let's try the same solution on the bigger tables
//  This busts on a dev cluster (E_RUNAWAY_QUERY)
let mapping=fullColours
| join kind=inner fullTemperatures on assetId
| where timeStamp <= timeStamp1
| summarize temperatureTimeStamp=min(timeStamp1) by assetId, colourTimeStamp=timeStamp;
mapping
| limit 10

//  Let's try the approach laid out in
//  https://docs.microsoft.com/en-us/azure/kusto/query/join-timewindow
//  We quantitize time in bins.
//  The size of the bucket should be the longest time interval we expect
//  between the 2 sensors' reading.  This should be including clock
//  discrepencies.
//  Here we choose 1 seconds
let maxDelta=1s;
colours
| project-rename colourTimeStamp=timeStamp
//  Create an array of 2 values for the time key
| extend colourTimeKey=pack_array(
    bin(colourTimeStamp-maxDelta, maxDelta),
    bin(colourTimeStamp, maxDelta))
//  Expand that array into 2 rows
| mv-expand colourTimeKey to typeof(datetime)
| join kind=inner
(
    temperatures
    | project-rename temperatureTimeStamp=timeStamp
    | extend temperatureTimeKey=bin(temperatureTimeStamp, maxDelta)
)
on $left.assetId==$right.assetId, $left.colourTimeKey==$right.temperatureTimeKey
| where colourTimeStamp > temperatureTimeStamp
| summarize temperatureTimeStamp=max(temperatureTimeStamp) by assetId, colourTimeStamp;

//  We obtain the same result as before
//  The result set is so small, it's not possible to measure how more
//  memory-efficient it was though
//  So let's try on the bigger result set
.set-or-replace fullColoursWithTemperatures <|
let maxDelta=1s;
let mapping=fullColours
| project-rename colourTimeStamp=timeStamp
//  Create an array of 2 values for the time key
| extend colourTimeKey=pack_array(
    bin(colourTimeStamp-maxDelta, maxDelta),
    bin(colourTimeStamp, maxDelta))
//  Expand that array into 2 rows
| mv-expand colourTimeKey to typeof(datetime)
| join kind=inner
(
    fullTemperatures
    | project-rename temperatureTimeStamp=timeStamp
    | extend temperatureTimeKey=bin(temperatureTimeStamp, maxDelta)
)
on $left.assetId==$right.assetId, $left.colourTimeKey==$right.temperatureTimeKey
| where colourTimeStamp > temperatureTimeStamp
| summarize temperatureTimeStamp=max(temperatureTimeStamp) by assetId, colourTimeStamp;
fullColours
| join kind=inner mapping on assetId
| where timeStamp == colourTimeStamp
| join kind=inner fullTemperatures on assetId
| where timeStamp1 == temperatureTimeStamp
| project assetId, colourTimeStamp, temperatureTimeStamp, colour, temperature

//  We can notice the cardinality of that last table is 9 995 001
//  That is 5000 less than the fullColours table
//  This makes sense as the first record for each of the 5000 assets
//  doesn't have a measurement in the fullTemperature table
fullColoursWithTemperatures
| count