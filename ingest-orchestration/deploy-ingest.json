{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "variables": {
        "Unique ID": "[uniqueString(concat(resourceGroup().id, 'adls-acl-api'))]",
        "Ingest Identity Name": "[concat('ingest-identity-', variables('Unique ID'))]",
        "List Blobs Name": "[concat('list-blobs-api-', variables('Unique ID'))]",
        "Kusto API Name": "[concat('kusto-api-', variables('Unique ID'))]",
        "Ingest Directory Name": "[concat('ingest-directory-api-', variables('Unique ID'))]",
        "Batch Blobs Name": "[concat('batch-blobs-api-', variables('Unique ID'))]"
    },
    "resources": [
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "[variables('Ingest Identity Name')]",
            "apiVersion": "2018-11-30",
            "location": "[resourceGroup().location]"
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[variables('List Blobs Name')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Ingest Identity Name'))]"
            ],
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Ingest Identity Name'))]": {}
                }
            },
            "properties": {
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {
                                    "properties": {
                                        "container": {
                                            "type": "string"
                                        },
                                        "directory": {
                                            "type": "string"
                                        },
                                        "doListDirectories": {
                                            "type": "boolean"
                                        },
                                        "storageAccount": {
                                            "type": "string"
                                        },
                                        "suffix": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "storageAccount",
                                        "container"
                                    ],
                                    "type": "object"
                                }
                            },
                            "operationOptions": "EnableSchemaValidation"
                        }
                    },
                    "actions": {
                        "base-url": {
                            "runAfter": {
                                "init-continuation": [
                                    "Succeeded"
                                ],
                                "init-error": [
                                    "Succeeded"
                                ],
                                "init-paths": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "https://@{triggerBody()['storageAccount']}.dfs.core.windows.net/@{triggerBody()['container']}?resource=filesystem&recursive=true"
                        },
                        "blobs": {
                            "runAfter": {
                                "until-continuation": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Query",
                            "inputs": {
                                "from": "@variables('paths')",
                                "where": "@not(equals(item()?['isDirectory'], 'true'))"
                            }
                        },
                        "if-list-directories": {
                            "actions": {
                                "directories": {
                                    "runAfter": {},
                                    "type": "Query",
                                    "inputs": {
                                        "from": "@variables('paths')",
                                        "where": "@equals(item()?['isDirectory'], 'true')"
                                    }
                                },
                                "response-success-with-directories": {
                                    "runAfter": {
                                        "directories": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Response",
                                    "kind": "Http",
                                    "inputs": {
                                        "body": {
                                            "blobs": "@body('blobs')",
                                            "directories": "@body('directories')"
                                        },
                                        "statusCode": 200
                                    }
                                }
                            },
                            "runAfter": {
                                "blobs": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "response-success-without-directories": {
                                        "runAfter": {},
                                        "type": "Response",
                                        "kind": "Http",
                                        "inputs": {
                                            "body": {
                                                "blobs": "@body('blobs')"
                                            },
                                            "statusCode": 200
                                        }
                                    }
                                }
                            },
                            "expression": "@triggerBody()?['doListDirectories']",
                            "type": "If"
                        },
                        "init-continuation": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "continuation",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "init-error": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "error",
                                        "type": "object"
                                    }
                                ]
                            }
                        },
                        "init-paths": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "paths",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "response-failure": {
                            "runAfter": {
                                "until-continuation": [
                                    "Failed",
                                    "TimedOut"
                                ]
                            },
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                                "body": "@variables('error')",
                                "statusCode": 500
                            }
                        },
                        "until-continuation": {
                            "actions": {
                                "data-lake-list": {
                                    "runAfter": {
                                        "with-continuation": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "authentication": {
                                            "audience": "https://storage.azure.com",
                                            "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Ingest Identity Name'))]",
                                            "type": "ManagedServiceIdentity"
                                        },
                                        "headers": {
                                            "x-ms-version": "2019-07-07"
                                        },
                                        "method": "GET",
                                        "uri": "@{outputs('with-continuation')}"
                                    }
                                },
                                "set-continuation": {
                                    "runAfter": {
                                        "data-lake-list": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "continuation",
                                        "value": "@{outputs('data-lake-list')['headers']?['x-ms-continuation']}"
                                    }
                                },
                                "set-http-error": {
                                    "inputs": {
                                        "name": "error",
                                        "value": {
                                            "innerError": {
                                                "body": "@body('data-lake-list')",
                                                "code": "@outputs('data-lake-list')['statusCode']",
                                                "headers": "@outputs('data-lake-list')['headers']"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "data-lake-list": [
                                            "Failed",
                                            "TimedOut"
                                        ]

                                    },
                                    "type": "SetVariable"
                                },
                                "set-paths": {
                                    "runAfter": {
                                        "union-paths": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "paths",
                                        "value": "@outputs('union-paths')"
                                    }
                                },
                                "filter-suffix": {
                                    "inputs": {
                                        "from": "@body('data-lake-list').paths",
                                        "where": "@or(equals(item()?['isDirectory'], 'true'), endswith(item().name, coalesce(triggerBody()?['suffix'], '')))"
                                    },
                                    "runAfter": {
                                        "set-continuation": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Query"
                                },
                                "union-paths": {
                                    "inputs": "@union(variables('paths'), body('filter-suffix'))",
                                    "runAfter": {
                                        "filter-suffix": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose"
                                },
                                "with-continuation": {
                                    "runAfter": {},
                                    "type": "Compose",
                                    "inputs": "@concat(outputs('with-directory'), if(equals('', variables('continuation')), '', concat('&continuation=', encodeUriComponent(variables('continuation')))))"
                                }
                            },
                            "runAfter": {
                                "with-directory": [
                                    "Succeeded"
                                ]
                            },
                            "expression": "@equals(variables('continuation'), '')",
                            "limit": {
                                "count": 60,
                                "timeout": "PT1H"
                            },
                            "type": "Until"
                        },
                        "with-directory": {
                            "runAfter": {
                                "base-url": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@if(equals('', coalesce(triggerBody()?['directory'], '')), outputs('base-url'), concat(outputs('base-url'), '&directory=', encodeUriComponent(triggerBody()?['directory'])))"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {}
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[variables('Kusto API Name')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Ingest Identity Name'))]"
            ],
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Ingest Identity Name'))]": {}
                }
            },
            "properties": {
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                    },
                    "triggers": {
                        "manual": {
                            "inputs": {
                                "schema": {
                                    "properties": {
                                        "clusterUri": {
                                            "type": "string"
                                        },
                                        "db": {
                                            "type": "string"
                                        },
                                        "csl": {
                                            "type": "string"
                                        },
                                        "isCommand": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "clusterUri",
                                        "db",
                                        "csl",
                                        "isCommand"
                                    ],
                                    "type": "object"
                                }
                            },
                            "kind": "Http",
                            "operationOptions": "EnableSchemaValidation",
                            "type": "Request"
                        }
                    },
                    "actions": {
                        "invoke-kusto": {
                            "inputs": {
                                "authentication": {
                                    "audience": "@triggerBody()?['clusterUri']",
                                    "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Ingest Identity Name'))]",
                                    "type": "ManagedServiceIdentity"
                                },
                                "body": {
                                    "csl": "@triggerBody()?['csl']",
                                    "db": "@triggerBody()?['db']",
                                    "properties": "{\"Options\":{\"queryconsistency\":\"strongconsistency\"},\"Parameters\":{},\"ClientRequestId\":\"archive-app;42\"}"
                                },
                                "headers": {
                                    "Accept-Encoding": "deflate",
                                    "Connection": "Keep-Alive",
                                    "Content-Type": "application/json; charset=utf-8"
                                },
                                "method": "POST",
                                "retryPolicy": {
                                    "type": "none"
                                },
                                "uri": "@concat(triggerBody()?['clusterUri'], if(triggerBody()?['isCommand'], '/v1/rest/mgmt', '/v2/rest/query'))"
                            },
                            "limit": {
                                "timeout": "PT5S"
                            },
                            "runAfter": {
                            },
                            "type": "Http"
                        },
                        "is-command": {
                            "actions": {
                                "command-success-response": {
                                    "inputs": {
                                        "body": {
                                            "primary": {
                                                "rows": "@body('invoke-kusto').Tables[0].Rows",
                                                "columns": "@body('invoke-kusto').Tables[0].Columns"
                                            },
                                            "full": "@body('invoke-kusto')"
                                        },
                                        "statusCode": "@outputs('invoke-kusto')['statusCode']"
                                    },
                                    "kind": "http",
                                    "runAfter": {
                                    },
                                    "type": "Response"
                                }
                            },
                            "else": {
                                "actions": {
                                    "primary-result": {
                                        "inputs": {
                                            "from": "@body('invoke-kusto')",
                                            "where": "@equals(item()?.TableKind, 'PrimaryResult')"
                                        },
                                        "runAfter": {
                                        },
                                        "type": "Query"
                                    },
                                    "query-success-response": {
                                        "inputs": {
                                            "body": {
                                                "primary": {
                                                    "rows": "@body('primary-result')[0].Rows",
                                                    "columns": "@body('primary-result')[0].Columns"
                                                },
                                                "full": "@body('invoke-kusto')"
                                            },
                                            "statusCode": "@outputs('invoke-kusto')['statusCode']"
                                        },
                                        "kind": "http",
                                        "runAfter": {
                                            "primary-result": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "Response"
                                    }
                                }
                            },
                            "expression": "@triggerBody()?['isCommand']",
                            "runAfter": {
                                "invoke-kusto": [
                                    "Succeeded"
                                ]
                            },
                            "type": "If"
                        },
                        "failure-response": {
                            "inputs": {
                                "body": "@concat('Failure at Kusto:  ', body('invoke-kusto'))",
                                "statusCode": "@outputs('invoke-kusto')['statusCode']"
                            },
                            "kind": "http",
                            "runAfter": {
                                "invoke-kusto": [
                                    "Failed"
                                ]
                            },
                            "type": "Response"
                        }
                    },
                    "outputs": {
                    }
                },
                "parameters": {
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[variables('Batch Blobs Name')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Logic/workflows', variables('List Blobs Name'))]",
                "[resourceId('Microsoft.Logic/workflows', variables('Kusto API Name'))]"
            ],
            "properties": {
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "actions": {
                        "compose-order-query": {
                            "inputs": "let data = dynamic(\n@{string(body('select-blobs'))}\n);\nprint data=data\n| mv-expand data\n| evaluate bag_unpack(data)\n| extend contentLength=tolong(contentLength)\n| parse name with * \"year=\" year:int \"/month=\" month:int \"/day=\" day:int \"/\" *\n| extend creationTime=make_datetime(year, month, day)\n| extend e = pack(\"name\", name, \"contentLength\", contentLength)\n| summarize blobs=make_list(e) by creationTime\n",
                            "runAfter": {
                                "select-blobs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose"
                        },
                        "group-by-creation-time": {
                            "inputs": {
                                "body": {
                                    "clusterUri": "@triggerBody()['kusto']['clusterUri']",
                                    "csl": "@{outputs('compose-order-query')}",
                                    "db": "@triggerBody()['kusto']['db']",
                                    "isCommand": false
                                },
                                "host": {
                                    "triggerName": "manual",
                                    "workflow": {
                                        "id": "[resourceId('Microsoft.Logic/workflows', variables('Kusto API Name'))]"
                                    }
                                }
                            },
                            "runAfter": {
                                "compose-order-query": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Workflow"
                        },
                        "list-blobs": {
                            "inputs": {
                                "body": {
                                    "container": "@triggerBody()?['storage']?['container']",
                                    "directory": "@triggerBody()?['storage']?['directory']",
                                    "doListDirectories": false,
                                    "storageAccount": "@triggerBody()?['storage']?['storageAccount']",
                                    "suffix": "@triggerBody()?['storage']?['suffix']"
                                },
                                "host": {
                                    "triggerName": "manual",
                                    "workflow": {
                                        "id": "[resourceId('Microsoft.Logic/workflows', variables('List Blobs Name'))]"
                                    }
                                }
                            },
                            "runAfter": {},
                            "type": "Workflow"
                        },
                        "select-blobs": {
                            "inputs": {
                                "from": "@body('list-blobs')['blobs']",
                                "select": {
                                    "contentLength": "@item()?['contentLength']",
                                    "name": "@item()['name']"
                                }
                            },
                            "runAfter": {
                                "list-blobs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Select"
                        },
                        "select-groups": {
                            "inputs": {
                                "from": "@body('group-by-creation-time').primary.rows",
                                "select": {
                                    "blobs": "@item()[1]",
                                    "creationTime": "@item()[0]"
                                }
                            },
                            "runAfter": {
                                "group-by-creation-time": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Select"
                        },
                        "emptySet": {
                            "inputs": [],
                            "runAfter": {
                                "select-groups": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose"
                        },
                        "init-batches": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "batches",
                                        "type": "array"
                                    }
                                ]
                            },
                            "runAfter": {
                                "select-groups": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "init-remains": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "remains",
                                        "type": "array",
                                        "value": "@body('select-groups')"
                                    }
                                ]
                            },
                            "runAfter": {
                                "select-groups": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "until-batched": {
                            "actions": {
                                "compose-batching-query": {
                                    "inputs": "let contentLengthThreshold = @{parameters('defaultContentLengthThreshold')};\nlet data = dynamic(\n@{variables('remains')}\n);\nprint data=data\n| mv-expand data\n| evaluate bag_unpack(data)\n| mv-expand blobs\n| evaluate bag_unpack(blobs)\n| serialize\n| extend newCreationTime = (creationTime != prev(creationTime))\n| extend groupSum = row_cumsum(contentLength, newCreationTime)\n| extend partOfBatch = (groupSum<=contentLengthThreshold or newCreationTime)\n| extend p = pack(\"name\", name, \"contentLength\", contentLength)\n| summarize blobs=make_list(p) by creationTime, partOfBatch\n| extend p = pack(\"creationTime\", creationTime, \"blobs\", blobs)\n| summarize list=make_list(p) by partOfBatch\n| extend p = pack(iif(partOfBatch, \"newBatches\", \"remains\"), list)\n| summarize bag=make_bag(p)",
                                    "runAfter": {},
                                    "type": "Compose"
                                },
                                "if-remains": {
                                    "actions": {
                                        "remains": {
                                            "inputs": "@body('iterative-batch').primary.rows[0][0].remains",
                                            "runAfter": {},
                                            "type": "Compose"
                                        },
                                        "set-remains": {
                                            "inputs": {
                                                "name": "remains",
                                                "value": "@outputs('remains')"
                                            },
                                            "runAfter": {
                                                "remains": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable"
                                        }
                                    },
                                    "else": {
                                        "actions": {
                                            "set-empty-remains": {
                                                "inputs": {
                                                    "name": "remains",
                                                    "value": "@outputs('emptySet')"
                                                },
                                                "runAfter": {},
                                                "type": "SetVariable"
                                            }
                                        }
                                    },
                                    "expression": "@contains(body('iterative-batch').primary.rows[0][0], 'remains')",
                                    "runAfter": {
                                        "iterative-batch": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "If"
                                },
                                "iterative-batch": {
                                    "inputs": {
                                        "body": {
                                            "clusterUri": "@triggerBody()['kusto']['clusterUri']",
                                            "csl": "@{outputs('compose-batching-query')}",
                                            "db": "@triggerBody()['kusto']['db']",
                                            "isCommand": false
                                        },
                                        "host": {
                                            "triggerName": "manual",
                                            "workflow": {
                                                "id": "[resourceId('Microsoft.Logic/workflows', variables('Kusto API Name'))]"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "compose-batching-query": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Workflow"
                                },
                                "newBatches": {
                                    "inputs": "@body('iterative-batch').primary.rows[0][0].newBatches",
                                    "runAfter": {
                                        "iterative-batch": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose"
                                },
                                "set-batches": {
                                    "inputs": {
                                        "name": "batches",
                                        "value": "@outputs('totalBatches')"
                                    },
                                    "runAfter": {
                                        "totalBatches": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable"
                                },
                                "totalBatches": {
                                    "inputs": "@union(variables('batches'), outputs('newBatches'))",
                                    "runAfter": {
                                        "newBatches": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose"
                                }
                            },
                            "expression": "@equals(length(variables('remains')), 0)",
                            "limit": {
                                "count": 200,
                                "timeout": "PT1H"
                            },
                            "runAfter": {
                                "emptySet": [
                                    "Succeeded"
                                ],
                                "init-batches": [
                                    "Succeeded"
                                ],
                                "init-remains": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Until"
                        },
                        "compose-sort-batches": {
                            "inputs": "let contentLengthThreshold = 100000000;\nlet data = dynamic(\n@{variables('batches')}\n);\nprint data=data\n| mv-expand data\n| evaluate bag_unpack(data)\n| order by creationTime asc\n| extend p=pack(\"creationTime\", creationTime, \"blobs\", blobs)\n| summarize batches=make_list(p)",
                            "runAfter": {
                                "until-batched": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose"
                        },
                        "sort-batches": {
                            "inputs": {
                                "body": {
                                    "clusterUri": "@triggerBody()['kusto']['clusterUri']",
                                    "csl": "@{outputs('compose-sort-batches')}",
                                    "db": "@triggerBody()['kusto']['db']",
                                    "isCommand": false
                                },
                                "host": {
                                    "triggerName": "manual",
                                    "workflow": {
                                        "id": "[resourceId('Microsoft.Logic/workflows', variables('Kusto API Name'))]"
                                    }
                                }
                            },
                            "runAfter": {
                                "compose-sort-batches": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Workflow"
                        },
                        "response-success": {
                            "inputs": {
                                "body": "@body('select-groups')",
                                "statusCode": 200
                            },
                            "kind": "Http",
                            "runAfter": {
                                "select-groups": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Response"
                        }
                    },
                    "contentVersion": "1.0.0.0",
                    "outputs": {},
                    "parameters": {},
                    "triggers": {
                        "manual": {
                            "inputs": {
                                "schema": {
                                    "properties": {
                                        "kusto": {
                                            "properties": {
                                                "clusterUri": {
                                                    "type": "string"
                                                },
                                                "db": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "clusterUri",
                                                "db"
                                            ],
                                            "type": "object"
                                        },
                                        "storage": {
                                            "properties": {
                                                "container": {
                                                    "type": "string"
                                                },
                                                "directory": {
                                                    "type": "string"
                                                },
                                                "storageAccount": {
                                                    "type": "string"
                                                },
                                                "suffix": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "storageAccount",
                                                "container",
                                                "directory"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "storage",
                                        "kusto"
                                    ],
                                    "type": "object"
                                }
                            },
                            "kind": "Http",
                            "operationOptions": "EnableSchemaValidation",
                            "type": "Request"
                        }
                    }
                },
                "parameters": {}
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[variables('Ingest Directory Name')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Logic/workflows', variables('List Blobs Name'))]"
            ],
            "properties": {
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {
                                    "properties": {
                                        "container": {
                                            "type": "string"
                                        },
                                        "directory": {
                                            "type": "string"
                                        },
                                        "doListDirectories": {
                                            "type": "boolean"
                                        },
                                        "storageAccount": {
                                            "type": "string"
                                        },
                                        "suffix": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "storageAccount",
                                        "container"
                                    ],
                                    "type": "object"
                                }
                            },
                            "operationOptions": "EnableSchemaValidation"
                        }
                    },
                    "actions": {},
                    "outputs": {}
                },
                "parameters": {}
            }
        }
    ],
    "outputs": {
        "data-lake-id": {
            "type": "object",
            "value": "[reference(variables('Ingest Identity Name'), '2018-11-30')]"
        }
    }
}