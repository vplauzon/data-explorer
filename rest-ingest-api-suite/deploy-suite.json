{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
    },
    "variables": {
        "Unique ID": "[uniqueString(concat(resourceGroup().id, 'ingest-blob'))]",
        "Identity Name": "[concat('kusto-access-identity-', variables('Unique ID'))]",
        "List Blobs Name": "[concat('list-blobs-', variables('Unique ID'))]",
        "Get Kusto Resources Name": "[concat('get-kusto-resources-', variables('Unique ID'))]",
        "Ingest Blobs Name": "[concat('ingest-blobs-', variables('Unique ID'))]"
    },
    "resources": [
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "[variables('Identity Name')]",
            "apiVersion": "2018-11-30",
            "location": "[resourceGroup().location]"
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[variables('List Blobs Name')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Identity Name'))]"
            ],
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Identity Name'))]": {}
                }
            },
            "properties": {
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {
                                    "properties": {
                                        "container": {
                                            "type": "string"
                                        },
                                        "directory": {
                                            "type": "string"
                                        },
                                        "doListDirectories": {
                                            "type": "boolean"
                                        },
                                        "storageAccount": {
                                            "type": "string"
                                        },
                                        "suffix": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "storageAccount",
                                        "container"
                                    ],
                                    "type": "object"
                                }
                            },
                            "operationOptions": "EnableSchemaValidation"
                        }
                    },
                    "actions": {
                        "base-url": {
                            "runAfter": {
                                "init-continuation": [
                                    "Succeeded"
                                ],
                                "init-error": [
                                    "Succeeded"
                                ],
                                "init-paths": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "https://@{triggerBody()['storageAccount']}.dfs.core.windows.net/@{triggerBody()['container']}?resource=filesystem&recursive=true"
                        },
                        "blobs": {
                            "runAfter": {
                                "until-continuation": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Query",
                            "inputs": {
                                "from": "@variables('paths')",
                                "where": "@not(equals(item()?['isDirectory'], 'true'))"
                            }
                        },
                        "if-list-directories": {
                            "actions": {
                                "directories": {
                                    "runAfter": {},
                                    "type": "Query",
                                    "inputs": {
                                        "from": "@variables('paths')",
                                        "where": "@equals(item()?['isDirectory'], 'true')"
                                    }
                                },
                                "response-success-with-directories": {
                                    "runAfter": {
                                        "directories": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Response",
                                    "kind": "Http",
                                    "inputs": {
                                        "body": {
                                            "blobs": "@body('blobs')",
                                            "directories": "@body('directories')"
                                        },
                                        "statusCode": 200
                                    }
                                }
                            },
                            "runAfter": {
                                "blobs": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "response-success-without-directories": {
                                        "runAfter": {},
                                        "type": "Response",
                                        "kind": "Http",
                                        "inputs": {
                                            "body": {
                                                "blobs": "@body('blobs')"
                                            },
                                            "statusCode": 200
                                        }
                                    }
                                }
                            },
                            "expression": "@triggerBody()?['doListDirectories']",
                            "type": "If"
                        },
                        "init-continuation": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "continuation",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "init-error": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "error",
                                        "type": "object"
                                    }
                                ]
                            }
                        },
                        "init-paths": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "paths",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "response-failure": {
                            "runAfter": {
                                "until-continuation": [
                                    "Failed",
                                    "TimedOut"
                                ]
                            },
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                                "body": "@variables('error')",
                                "statusCode": 500
                            }
                        },
                        "until-continuation": {
                            "actions": {
                                "data-lake-list": {
                                    "runAfter": {
                                        "with-continuation": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "authentication": {
                                            "audience": "https://storage.azure.com",
                                            "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Identity Name'))]",
                                            "type": "ManagedServiceIdentity"
                                        },
                                        "headers": {
                                            "x-ms-version": "2019-07-07"
                                        },
                                        "method": "GET",
                                        "uri": "@{outputs('with-continuation')}"
                                    }
                                },
                                "set-continuation": {
                                    "runAfter": {
                                        "data-lake-list": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "continuation",
                                        "value": "@{outputs('data-lake-list')['headers']?['x-ms-continuation']}"
                                    }
                                },
                                "set-http-error": {
                                    "inputs": {
                                        "name": "error",
                                        "value": {
                                            "innerError": {
                                                "body": "@body('data-lake-list')",
                                                "code": "@outputs('data-lake-list')['statusCode']",
                                                "headers": "@outputs('data-lake-list')['headers']"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "data-lake-list": [
                                            "Failed",
                                            "TimedOut"
                                        ]

                                    },
                                    "type": "SetVariable"
                                },
                                "set-paths": {
                                    "runAfter": {
                                        "union-paths": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "paths",
                                        "value": "@outputs('union-paths')"
                                    }
                                },
                                "filter-suffix": {
                                    "inputs": {
                                        "from": "@body('data-lake-list').paths",
                                        "where": "@or(equals(item()?['isDirectory'], 'true'), endswith(item().name, coalesce(triggerBody()?['suffix'], '')))"
                                    },
                                    "runAfter": {
                                        "set-continuation": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Query"
                                },
                                "union-paths": {
                                    "inputs": "@union(variables('paths'), body('filter-suffix'))",
                                    "runAfter": {
                                        "filter-suffix": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose"
                                },
                                "with-continuation": {
                                    "runAfter": {},
                                    "type": "Compose",
                                    "inputs": "@concat(outputs('with-directory'), if(equals('', variables('continuation')), '', concat('&continuation=', encodeUriComponent(variables('continuation')))))"
                                }
                            },
                            "runAfter": {
                                "with-directory": [
                                    "Succeeded"
                                ]
                            },
                            "expression": "@equals(variables('continuation'), '')",
                            "limit": {
                                "count": 60,
                                "timeout": "PT1H"
                            },
                            "type": "Until"
                        },
                        "with-directory": {
                            "runAfter": {
                                "base-url": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@if(equals('', coalesce(triggerBody()?['directory'], '')), outputs('base-url'), concat(outputs('base-url'), '&directory=', encodeUriComponent(triggerBody()?['directory'])))"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {}
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[variables('Get Kusto Resources Name')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Identity Name'))]"
            ],
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Identity Name'))]": {}
                }
            },
            "properties": {
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "defaultDataManagementUri": {
                            "defaultValue": "##DEFINE A DEFAULT VALUE##",
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {
                                    "properties": {
                                        "dataManagementUri": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                    ],
                                    "type": "object"
                                }
                            },
                            "operationOptions": "EnableSchemaValidation"
                        }
                    },
                    "actions": {
                        "data-management-uri": {
                            "runAfter": {},
                            "type": "Compose",
                            "inputs": "@coalesce(triggerBody()?['dataManagementUri'], parameters('defaultDataManagementUri'))"
                        },
                        "get-kusto-identity-token": {
                            "runAfter": {
                                "data-management-uri": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Http",
                            "inputs": {
                                "authentication": {
                                    "audience": "@outputs('data-management-uri')",
                                    "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Identity Name'))]",
                                    "type": "ManagedServiceIdentity"
                                },
                                "body": {
                                    "csl": ".get kusto identity token"
                                },
                                "method": "POST",
                                "uri": "@{concat(outputs('data-management-uri'), '/v1/rest/mgmt')}"
                            }
                        },
                        "kusto-identity-token": {
                            "runAfter": {
                                "get-kusto-identity-token": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@body('get-kusto-identity-token').Tables[0].Rows[0][0]"
                        },
                        "get-resources": {
                            "runAfter": {
                                "data-management-uri": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Http",
                            "inputs": {
                                "authentication": {
                                    "audience": "@outputs('data-management-uri')",
                                    "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Identity Name'))]",
                                    "type": "ManagedServiceIdentity"
                                },
                                "body": {
                                    "csl": ".get ingestion resources"
                                },
                                "method": "POST",
                                "uri": "@{concat(outputs('data-management-uri'), '/v1/rest/mgmt')}"
                            }
                        },
                        "transform-resources-rows": {
                            "inputs": {
                                "from": "@body('get-resources').Tables[0].Rows",
                                "select": {
                                    "type": "@item()[0]",
                                    "value": "@item()[1]"
                                }
                            },
                            "runAfter": {
                                "get-resources": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Select"
                        },
                        "failed-queue-array": {
                            "runAfter": {
                                "transform-resources-rows": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Query",
                            "inputs": {
                                "from": "@body('transform-resources-rows')",
                                "where": "@equals(item().type, 'FailedIngestionsQueue')"
                            }
                        },
                        "failed-queues": {
                            "runAfter": {
                                "failed-queue-array": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Select",
                            "inputs": {
                                "from": "@body('failed-queue-array')",
                                "select": "@item().value"
                            }
                        },
                        "ready-queue-array": {
                            "runAfter": {
                                "transform-resources-rows": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Query",
                            "inputs": {
                                "from": "@body('transform-resources-rows')",
                                "where": "@equals(item().type, 'SecuredReadyForAggregationQueue')"
                            }
                        },
                        "ready-queues": {
                            "runAfter": {
                                "ready-queue-array": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Select",
                            "inputs": {
                                "from": "@body('ready-queue-array')",
                                "select": "@item().value"
                            }
                        },
                        "successful-queue-array": {
                            "runAfter": {
                                "transform-resources-rows": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Query",
                            "inputs": {
                                "from": "@body('transform-resources-rows')",
                                "where": "@equals(item().type, 'SuccessfulIngestionsQueue')"
                            }
                        },
                        "successful-queues": {
                            "runAfter": {
                                "successful-queue-array": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Select",
                            "inputs": {
                                "from": "@body('successful-queue-array')",
                                "select": "@item().value"
                            }
                        },
                        "temp-storage-array": {
                            "runAfter": {
                                "transform-resources-rows": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Query",
                            "inputs": {
                                "from": "@body('transform-resources-rows')",
                                "where": "@equals(item().type, 'TempStorage')"
                            }
                        },
                        "temp-storages": {
                            "runAfter": {
                                "temp-storage-array": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Select",
                            "inputs": {
                                "from": "@body('temp-storage-array')",
                                "select": "@item().value"
                            }
                        },
                        "status-tables-array": {
                            "runAfter": {
                                "transform-resources-rows": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Query",
                            "inputs": {
                                "from": "@body('transform-resources-rows')",
                                "where": "@equals(item().type, 'IngestionsStatusTable')"
                            }
                        },
                        "status-tables": {
                            "runAfter": {
                                "status-tables-array": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Select",
                            "inputs": {
                                "from": "@body('status-tables-array')",
                                "select": "@item().value"
                            }
                        },
                        "response-success": {
                            "runAfter": {
                                "failed-queues": [
                                    "Succeeded"
                                ],
                                "ready-queues": [
                                    "Succeeded"
                                ],
                                "successful-queues": [
                                    "Succeeded"
                                ],
                                "temp-storages": [
                                    "Succeeded"
                                ],
                                "status-tables": [
                                    "Succeeded"
                                ],
                                "kusto-identity-token": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                                "body": {
                                    "failedQueues": "@body('failed-queues')",
                                    "readyQueues": "@body('ready-queues')",
                                    "successfulQueues": "@body('successful-queues')",
                                    "tempStorages": "@body('temp-storages')",
                                    "statusTables": "@body('status-tables')",
                                    "identityToken": "@outputs('kusto-identity-token')"
                                },
                                "statusCode": 200
                            },
                            "operationOptions": "Asynchronous"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {}
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[variables('Ingest Blobs Name')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Identity Name'))]",
                "[resourceId('Microsoft.Logic/workflows', variables('List Blobs Name'))]",
                "[resourceId('Microsoft.Logic/workflows', variables('Get Kusto Resources Name'))]"
            ],
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Identity Name'))]": {}
                }
            },
            "properties": {
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "defaultDataManagementUri": {
                            "defaultValue": "##DEFINE A DEFAULT VALUE##",
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {
                                    "properties": {
                                        "blobs": {
                                            "items": {
                                                "properties": {
                                                    "additionalProperties": {
                                                        "type": "object"
                                                    },
                                                    "blobUri": {
                                                        "type": "string"
                                                    },
                                                    "rawDataSize": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "blobUri"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "dataManagementUri": {
                                            "type": "string"
                                        },
                                        "database": {
                                            "type": "string"
                                        },
                                        "flushImmediately": {
                                            "type": "boolean"
                                        },
                                        "table": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "database",
                                        "table",
                                        "blobs"
                                    ],
                                    "type": "object"
                                }
                            },
                            "operationOptions": "EnableSchemaValidation"
                        }
                    },
                    "actions": {
                        "data-management-uri": {
                            "runAfter": {},
                            "type": "Compose",
                            "inputs": "@coalesce(triggerBody()?['dataManagementUri'], parameters('defaultDataManagementUri'))"
                        },
                        "get-kusto-resources": {
                            "inputs": {
                                "body": {
                                    "dataManagementUri": "@{outputs('data-management-uri')}"
                                },
                                "host": {
                                    "triggerName": "manual",
                                    "workflow": {
                                        "id": "[resourceId('Microsoft.Logic/workflows', variables('Get Kusto Resources Name'))]"
                                    }
                                }
                            },
                            "runAfter": {
                                "data-management-uri": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Workflow"
                        },
                        "put-message-url": {
                            "runAfter": {
                                "get-kusto-resources": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@concat(split(body('get-kusto-resources').readyQueues[0], '?')[0], '/messages?', split(body('get-kusto-resources').readyQueues[0], '?')[1], '&api-version=2019-02-02')"
                        },
                        "loop-blobs": {
                            "foreach": "@triggerBody()?['blobs']",
                            "actions": {
                                "add-flush-messages": {
                                    "runAfter": {
                                        "ingestion-message": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose",
                                    "inputs": "@if(equals(triggerBody()?['flushImmediately'], null), outputs('ingestion-message'), addProperty(outputs('ingestion-message'), 'FlushImmediately', triggerBody()?['flushImmediately']))"
                                },
                                "add-raw-data-size": {
                                    "runAfter": {
                                        "add-flush-messages": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose",
                                    "inputs": "@if(equals(triggerBody()?['rawDataSize'], null), outputs('add-flush-messages'), addProperty(outputs('add-flush-messages'), 'RawDataSize', triggerBody()?['rawDataSize']))"
                                },
                                "additional-properties": {
                                    "runAfter": {
                                        "ingestion-id": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose",
                                    "inputs": "@addProperty(coalesce(items('loop-blobs').additionalProperties, json('{}')), 'authorizationContext', body('get-kusto-resources').identityToken)"
                                },
                                "ingestion-id": {
                                    "runAfter": {},
                                    "type": "Compose",
                                    "inputs": "@guid()"
                                },
                                "ingestion-message": {
                                    "runAfter": {
                                        "additional-properties": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose",
                                    "inputs": {
                                        "AdditionalProperties": "@outputs('additional-properties')",
                                        "BlobPath": "@{items('loop-blobs').blobUri}",
                                        "DatabaseName": "@{triggerBody()?['database']}",
                                        "Id": "@{outputs('ingestion-id')}",
                                        "ReportLevel": 2,
                                        "ReportMethod": 0,
                                        "RetainBlobOnSuccess": true,
                                        "TableName": "@{triggerBody()?['table']}"
                                    }
                                },
                                "post-message-to-queue": {
                                    "runAfter": {
                                        "add-raw-data-size": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "body": "<QueueMessage><MessageText>@{base64(string(outputs('add-raw-data-size')))}</MessageText></QueueMessage>",
                                        "headers": {
                                            "x-ms-client-request-id": "@{guid()}",
                                            "x-ms-version": "2019-02-02"
                                        },
                                        "method": "POST",
                                        "uri": "@{outputs('put-message-url')}"
                                    }
                                }
                            },
                            "runAfter": {
                                "put-message-url": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach",
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "repetitions": 50
                                }
                            }
                        },
                        "response-success": {
                            "runAfter": {
                                "loop-blobs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                                "body": {
                                    "blobCount": "@length(triggerBody()?['blobs'])"
                                },
                                "statusCode": 200
                            },
                            "operationOptions": "Asynchronous"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {}
            }
        }
    ],
    "outputs": {
    }
}